#include <ESP8266WiFi.h>
#include <PubSubClient.h>
#include <SoftwareSerial.h>
#include <ArduinoJson.h>

const char * ssid = "DIGI-T8CD";
const char * password = "62hGeg2r";
const char * mqtt_broker = "broker.emqx.io";
const char * publish_topic = "/EA4/licenta/parcare";
const char * mqtt_username = "emqx";
const char * mqtt_password = "public";
const int mqtt_port = 1883;
WiFiClient wifiClient;
PubSubClient mqttClient(wifiClient);

SoftwareSerial mySerial(4, 5); // RX, TX
// Pinul 4 este pinul D2 (GPIO 4) pe placa NodeMCU.
// Pinul 5 este pinul D1 (GPIO 5) pe placa NodeMCU.
const int threshold = 10;

void setup_wifi() {
  delay(10);
  Serial.print("\nConnecting to ");
  Serial.println(ssid);
  WiFi.mode(WIFI_STA);
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  randomSeed(micros());
  Serial.println("\nWiFi connected\nIP address: ");
  Serial.println(WiFi.localIP());
}

void reconnect() {
  while (!mqttClient.connected()) {
    Serial.print("Attempting MQTT connection...");
    String clientId = "ESP8266Client-";
    clientId += String(random(0xffff), HEX);
    if (mqttClient.connect(clientId.c_str(), mqtt_username, mqtt_password)) {
      Serial.println("connected");
    } else {
      Serial.print("failed, rc=");
      Serial.print(mqttClient.state());
      Serial.println("try again in 5 seconds");
      delay(5000);
    }
  }
}

void publishMessage(const char * topic, String payload, boolean retained) {
  if (mqttClient.publish(topic, payload.c_str(), true))
    Serial.println("Message published " + String(topic) + ": " + payload);
}

void setup() {
  // Open serial communications and wait for port to open:
  Serial.begin(115200);
  
  // Conectare la WiFi
  setup_wifi();
  
  // Așteptăm conectarea Serial Monitor
  while (!Serial) {
    ; 
  }
}

void loop() {
  if (!mqttClient.connected()) {
    reconnect();
  }

  if (mySerial.available()) {
    // Citim datele de la Arduino prin portul serial
    String distanceData = mySerial.readStringUntil('\n');

    // Afișăm mesajul în Serial Monitor
    Serial.println("Mesaj primit de la Arduino: " + distanceData);

    // Creăm un obiect JSON pentru a formata datele
    StaticJsonDocument<1024> doc;
    doc["distanceData"] = distanceData;

    // Serializăm obiectul JSON într-un șir de caractere
    String jsonString;
    serializeJson(doc, jsonString);

    // Publicăm datele către serverul MQTT
    publishMessage(publish_topic, jsonString, true);

    delay(1000); // Așteptăm 1 secundă între publicări
  }

  mqttClient.loop();
}
