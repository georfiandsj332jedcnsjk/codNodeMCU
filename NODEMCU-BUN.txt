#include <ESP8266WiFi.h>
#include <PubSubClient.h>
#include <SoftwareSerial.h>
#include <ArduinoJson.h>

const char *ssid = "DIGI-T8CD";
const char *password = "62hGeg2r";
const char *mqtt_broker = "broker.emqx.io";
const char *publish_topic = "/EA4/licenta/parcare";
const char *mqtt_username = "emqx";
const char *mqtt_password = "public";
const int mqtt_port = 1883;


const char* thing  = "parcare";
const char* thing_content = "senzor";

int numarSenzori = 4;
int prag = 20;

WiFiClient wifiClient;
PubSubClient mqttClient(wifiClient);

void setup() {
  Serial.begin(9600);
  WiFi.begin(ssid, password);
  
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
  }

  Serial.println("WiFi connected");

  mqttClient.setServer(mqtt_broker, mqtt_port);
  mqttClient.setCallback(callback);

  reconnect();
}

void loop() {
  if (!mqttClient.connected()) {
    reconnect();
  }

  for (int i = 0; i < numarSenzori; i++) {
    int distanta = citesteDistantaDeLaSenzor(i);
    Serial.print("Distanta de la senzorul ");
    Serial.print(i + 1);
    Serial.print(": ");
    Serial.println(distanta);
    
    if (distanta < prag) {
      trimiteMesajDweet(i, "ocupat");
    } else {
      trimiteMesajDweet(i, "liber");
    }
    
    delay(500);
  }
  
  delay(5000);
}

void callback(char* topic, byte* payload, unsigned int length) {
  // Manejează mesajele primite, dacă este necesar
}

int citesteDistantaDeLaSenzor(int index) {
  // Implementați logica de citire a datelor de la senzorul cu indexul dat
  int distantaCitita = 0; // Implementați citirea distanței de la senzorul cu indexul dat
  return distantaCitita; // Adăugarea instrucțiunii de return pentru a returna distanța citită
}

void trimiteMesajDweet(int senzor, String stare) {
  DynamicJsonDocument doc(1024);
  doc["senzor" + String(senzor + 1)] = stare;

  String jsonString;
  serializeJson(doc, jsonString);

 publishMessage(publish_topic, jsonString, true); // Corectare aici
}

void publishMessage(const char* topic, String payload, boolean retained) {
  mqttClient.publish(topic, payload.c_str(), retained);
}

void reconnect() {
  while (!mqttClient.connected()) {
    Serial.println("Attempting MQTT connection...");
    if (mqttClient.connect("ESP8266Client", mqtt_username, mqtt_password)) {
      Serial.println("connected");
    } else {
      Serial.print("failed, rc=");
      Serial.print(mqttClient.state());
      Serial.println(" try again in 5 seconds");
      delay(5000);
    }
  }
}
