#include <ESP8266WiFi.h>
#include <PubSubClient.h>
#include <SoftwareSerial.h>
#include <ArduinoJson.h>
const char *ssid = "DIGI-T8CD";
const char *password = "62hGeg2r";
const char *mqtt_broker = "broker.emqx.io";
const char *publish_topic = "/EA4/licenta/parcare";
const char *mqtt_username = "emqx";
const char *mqtt_password = "public";
const int mqtt_port = 1883;
WiFiClient wifiClient;
PubSubClient mqttClient(wifiClient);


void setup_wifi() {
delay(10);
Serial.print("\nConnecting to ");
Serial.println(ssid);
WiFi.mode(WIFI_STA);
WiFi.begin(ssid, password);
while (WiFi.status() != WL_CONNECTED) {
delay(500);
Serial.print(".");
}
randomSeed(micros());
Serial.println("\nWiFi connected\nIP address: ");
Serial.println(WiFi.localIP());
}


void reconnect() {
while (!mqttClient.connected()) {
Serial.print("Attempting MQTT connection...");
String clientId = "ESP8266Client-";
clientId += String(random(0xffff), HEX);
if (mqttClient.connect(clientId.c_str(), mqtt_username, mqtt_password)) {
Serial.println("connected");
} else {
Serial.print("failed, rc=");
Serial.print(mqttClient.state());
Serial.println("try again in 5 seconds");
delay(5000);
}
}
}


void publishMessage(const char *topic, String payload, boolean retained) {
if (mqttClient.publish(topic, payload.c_str(), true))
Serial.println("Message published " + String(topic) + ": " + payload);
}


float readDistanceFromSensor(int sensorNumber) {
// Implementați citirea distanței de la senzorul specificat
return 0.0; // Returnați distanța citită
}


void setup() {
Serial.begin(9600);
while (!Serial) delay(1);
setup_wifi();
mqttClient.setServer(mqtt_broker, mqtt_port);
}


void loop() {
if (!mqttClient.connected()) {
reconnect();
}


float distance1 = readDistanceFromSensor(1);
float distance2 = readDistanceFromSensor(2);
float distance3 = readDistanceFromSensor(3);
float distance4 = readDistanceFromSensor(4);


StaticJsonDocument<1024> doc;
doc["Loc1"] = (distance1 < 10) ? "este ocupat" : "este liber";
doc["Loc2"] = (distance2 < 10) ? "este ocupat" : "este liber";
doc["Loc3"] = (distance3 < 10) ? "este ocupat" : "este liber";
doc["Loc4"] = (distance4 < 10) ? "este ocupat" : "este liber";
String jsonString;
serializeJson(doc, jsonString);
publishMessage("/EA4/licenta/parcare", jsonString, true);
delay(5000);
}
