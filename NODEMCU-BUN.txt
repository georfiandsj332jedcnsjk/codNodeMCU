#include <ESP8266WiFi.h>
#include <PubSubClient.h>
#include <SoftwareSerial.h>
#include <ArduinoJson.h>
#include <Arduino.h>
#include <WiFi.h>
#include <WebServer.h>
#define RXp2 3
#define TXp2 1

const char *ssid = "DIGI-T8CD";
const char *password = "62hGeg2r";
const char *mqtt_broker = "broker.emqx.io";
const char *publish_topic_prefix = "/EA4/licenta/parcare"; // Prefixul pentru subiectele MQTT
const char *mqtt_username = "emqx";
const char *mqtt_password = "public";
const int mqtt_port = 1883;
WiFiClient wifiClient;
PubSubClient mqttClient(wifiClient);
Serial2.begin (9600, SERIAL_8N1, RXp2, TXp2)
WebServer server(80);
const int threshold = 10;

void setup_wifi() {
  delay(10);
  Serial.println("\nConnecting to " + String(ssid));
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\nWiFi connected\nIP address: " + WiFi.localIP().toString());
}

void mqtt_callback(char *topic, byte *payload, unsigned int length) {
  // Aici poți trata mesajele primite, dacă este necesar
}
void connectedToWiFi(){
  
}
void reconnect() {
  while (!mqttClient.connected()) {
    Serial.print("Attempting MQTT connection...");
    String clientId = "ESP8266Client-";
    clientId += String(random(0xffff), HEX);
    if (mqttClient.connect(clientId.c_str())) {
      Serial.println("connected");
      // Subscriem la toate subiectele pentru senzori
      for (int i = 1; i <= 4; i++) {
        String topic = String(publish_topic_prefix) + String(i);
        mqttClient.subscribe(topic.c_str());
      }
    } else {
      Serial.print("failed, rc=");
      Serial.print(mqttClient.state());
      Serial.println("try again in 5 seconds");
      delay(5000);
    }
  }
}

void setup() {
  Serial.begin(9600);
  setup_wifi();
  mqttClient.setServer(mqtt_broker, mqtt_port);
  mqttClient.setCallback(mqtt_callback);
}

void loop() {
  if (!mqttClient.connected()) {
    reconnect();
  }
  mqttClient.loop();

  for (int i = 1; i <= 4; i++) {
    if (mySerial.available()) {
      int distance = mySerial.parseInt(); // Citim distanta de la senzorul curent
      
      // Creăm un obiect JSON pentru starea senzorului
      StaticJsonDocument<1024> doc;
      doc["senzor"] = i;
      doc["stare"] = (distance < threshold) ? "ocupat" : "liber";

      // Serializăm obiectul JSON într-un șir de caractere
      String jsonString;
      serializeJson(doc, jsonString);

      // Serialize JSON to a string
  String jsonString;
  serializeJson(doc, jsonString);
  publishMessage("/EA4/licenta/parcare", jsonString, true);
  delay(5000);}
  }
}
